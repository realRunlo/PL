LEX:

literals = "+-/*=()"  #LT '=' aspval
ignore  = " \t\n "  #IG '=' aspval
tokens = ['VAR','NUMBER'] #TK '=' '[' pelval ',' pelval ]


lfunc: [a-zA-Z_\][\:a-zA-Z0-9_]*\: : return(’VAR’, t.value) #LFUNC RGX : RT '(' pelval ',' tvalue ')'
lfunc: \d+(\.\d+)? : return(’NUMBER’, float(t.value) } 
                #LFUNC RGX : RT '(' pelval ',' TYPE '(' tvalue ')' ')'

lfunc: .  : error(f"Illegal character ’{t.value[0]}’, [{t.lexer.lineno}]",t.lexer.skip(1) ) 
            #LFUNC RGX DOTS error

YACC: #YC

declatarion: #DEC

precedend =  [
            ('left','+','-'),
            ('left','*','/'),
            ('right','UMINUS'),
            ] #PREC '=' '[' '(LEFT ',' pelval)

ts = { }  #ID '=' '{' '}'
td = [] #ID '='


grammar: #grammar
stat : VAR ’=’ exp { ts[t[1]] = t[3] }  # NT DOTS T L NT '{'  cod   '}'
stat : exp { print(t[1]) } #NT : NT '{'  cod   '}'
exp : exp ’+’ exp { t[0] = t[1] + t[3] } # NT DOTS NT L NT '{'  cod   '}'
exp : exp ’-’ exp { t[0] = t[1] - t[3] }  # NT DOTS NT L NT '{'  cod   '}'
exp : exp ’*’ exp { t[0] = t[1] * t[3] } # NT DOTS NT L NT '{'  cod   '}'
exp : exp ’/’ exp { t[0] = t[1] / t[3] } # NT DOTS NT L NT '{'  cod   '}'
exp : ’-’ exp %prec UMINUS { t[0] = -t[2] } #NT DOTS L NT PREC val '{'  cod   '}'
exp : ’(’ exp ’)’ { t[0] = t[2] }  #NT DOTS T NT T '{'  cod   '}'
exp : NUMBER { t[0] = t[1] } #NT DOTS T '{'  cod   '}'
exp : VAR { t[0] = getval(t[1]) } #NT DOTS T '{'  cod   '}'

yfuncs: #YFUNCS
def p_error(t): #CHAPAR O TEXT
    print(f"Syntax error at ’{t.value}’, [{t.lexer.lineno}]")
def getval(n):
    if n not in ts: print(f"Undefined name ’{n}’")
    return ts.get(n,0)
