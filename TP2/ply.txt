t_ignore = " \t\n "
tokens = ['VAR', 'NUMBER']

def t_VAR(t):
	r'[a-zA-Z_\][:a-zA-Z0-9_]*: '
	return t
def t_NUMBER(t):
	r'\d+(\.\d+)? '
	t.value = float(t.value)
	return t
	printf(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1))

precedent = [('left','+','-'),('left','*','{'),('right','UMINUS'),]

td=[5,5,55,5]
ola=[]

def p_stat(p):
	"stat : VAR '=' exp "
	ts[t[1]]= t[3]

def p_stat_1(p):
	"stat : exp "
	print(t[1])

def p_exp(p):
	"exp : exp '+' exp "
	t[0]= t[1]+ t[3]

def p_exp_1(p):
	"exp : exp '-' exp "
	t[0]= t[1]- t[3]

def p_exp_2(p):
	"exp : exp '*' exp "
	t[0]= t[1]* t[3]

def p_exp_3(p):
	"exp : exp '{' exp "
	t[0]= t[1]/ t[3]

def p_exp_4(p):
	"exp : '-' exp %prec UMINUS "
	t[0]= -t[2]

def p_exp_5(p):
	"exp : '(' exp ')' "
	t[0]= t[2]

def p_exp_6(p):
	"exp : NUMBER "
	t[0]= t[1]

def p_exp_7(p):
	"exp : VAR "
	t[0]= getval(t[1])


def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")
def getval(n):
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)
